"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const clipboardy_clipboard_class_1 = __importDefault(require("./native/clipboardy-clipboard.class"));
const libnut_mouse_class_1 = __importDefault(require("./native/libnut-mouse.class"));
const libnut_keyboard_class_1 = __importDefault(require("./native/libnut-keyboard.class"));
const libnut_screen_class_1 = __importDefault(require("./native/libnut-screen.class"));
const libnut_window_class_1 = __importDefault(require("./native/libnut-window.class"));
const jimp_image_reader_class_1 = __importDefault(require("./io/jimp-image-reader.class"));
const jimp_image_writer_class_1 = __importDefault(require("./io/jimp-image-writer.class"));
const jimp_image_processor_class_1 = __importDefault(require("./image/jimp-image-processor.class"));
class DefaultProviderRegistry {
    getClipboard() {
        if (this._clipboard) {
            return this._clipboard;
        }
        throw new Error(`No ClipboardProvider registered`);
    }
    registerClipboardProvider(value) {
        this._clipboard = value;
    }
    getImageFinder() {
        if (this._finder) {
            return this._finder;
        }
        throw new Error(`No ImageFinder registered`);
    }
    registerImageFinder(value) {
        this._finder = value;
    }
    getKeyboard() {
        if (this._keyboard) {
            return this._keyboard;
        }
        throw new Error(`No KeyboardProvider registered`);
    }
    registerKeyboardProvider(value) {
        this._keyboard = value;
    }
    getMouse() {
        if (this._mouse) {
            return this._mouse;
        }
        throw new Error(`No MouseProvider registered`);
    }
    registerMouseProvider(value) {
        this._mouse = value;
    }
    getScreen() {
        if (this._screen) {
            return this._screen;
        }
        throw new Error(`No ScreenProvider registered`);
    }
    registerScreenProvider(value) {
        this._screen = value;
    }
    getWindow() {
        if (this._window) {
            return this._window;
        }
        throw new Error(`No WindowProvider registered`);
    }
    registerWindowProvider(value) {
        this._window = value;
    }
    getImageReader() {
        if (this._imageReader) {
            return this._imageReader;
        }
        throw new Error(`No ImageReader registered`);
    }
    registerImageReader(value) {
        this._imageReader = value;
    }
    getImageWriter() {
        if (this._imageWriter) {
            return this._imageWriter;
        }
        throw new Error(`No ImageWriter registered`);
    }
    registerImageWriter(value) {
        this._imageWriter = value;
    }
    getImageProcessor() {
        if (this._imageProcessor) {
            return this._imageProcessor;
        }
        throw new Error(`No ImageProcessor registered`);
    }
    registerImageProcessor(value) {
        this._imageProcessor = value;
    }
}
const providerRegistry = new DefaultProviderRegistry();
providerRegistry.registerClipboardProvider(new clipboardy_clipboard_class_1.default());
providerRegistry.registerKeyboardProvider(new libnut_keyboard_class_1.default());
providerRegistry.registerMouseProvider(new libnut_mouse_class_1.default());
providerRegistry.registerScreenProvider(new libnut_screen_class_1.default());
providerRegistry.registerWindowProvider(new libnut_window_class_1.default());
providerRegistry.registerImageWriter(new jimp_image_writer_class_1.default());
providerRegistry.registerImageReader(new jimp_image_reader_class_1.default());
providerRegistry.registerImageProcessor(new jimp_image_processor_class_1.default());
exports.default = providerRegistry;
//# sourceMappingURL=provider-registry.class.js.map